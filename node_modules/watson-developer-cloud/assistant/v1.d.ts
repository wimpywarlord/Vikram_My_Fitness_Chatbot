/// <reference types="node" />
/// <reference types="request" />
import { RequestResponse } from 'request';
import { BaseService } from '../lib/base_service';
/**
 * The IBM Watson Assistant service combines machine learning, natural language understanding, and integrated dialog tools to create conversation flows between your apps and your users.
 */
declare class AssistantV1 extends BaseService {
    static URL: string;
    name: string;
    serviceVersion: string;
    /**
     * Construct a AssistantV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The API version date to use with the service, in "YYYY-MM-DD" format. Whenever the API is changed in a backwards incompatible way, a new minor version of the API is released. The service uses the API version for the date you specify, or the most recent version before that date. Note that you should not programmatically specify the current date at runtime, in case the API has been updated since your application's release. Instead, specify a version date that is compatible with your application, and don't change it until your application is ready for a later version.
     * @param {string} [options.url] - The base url to use when contacting the service (e.g. 'https://gateway.watsonplatform.net/conversation/api'). The base url may differ between Bluemix regions.
     * @param {string} [options.username] - The username used to authenticate with the service. Username and password credentials are only required to run your application locally or outside of Bluemix. When running on Bluemix, the credentials will be automatically loaded from the `VCAP_SERVICES` environment variable.
     * @param {string} [options.password] - The password used to authenticate with the service. Username and password credentials are only required to run your application locally or outside of Bluemix. When running on Bluemix, the credentials will be automatically loaded from the `VCAP_SERVICES` environment variable.
     * @param {boolean} [options.use_unauthenticated] - Set to `true` to avoid including an authorization header. This option may be useful for requests that are proxied.
     * @param {Object} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {boolean} [options.headers.X-Watson-Learning-Opt-Out] - Set to `true` to opt-out of data collection. By default, all IBM Watson services log requests and their results. Logging is done only to improve the services for future users. The logged data is not shared or made public. If you are concerned with protecting the privacy of users' personal information or otherwise do not want your requests to be logged, you can opt out of logging.
     * @constructor
     * @returns {AssistantV1}
     * @throws {Error}
     */
    constructor(options: AssistantV1.Options);
    /*************************
     * workspaces
     ************************/
    /**
     * Create workspace.
     *
     * Create a workspace based on component objects. You must provide workspace components defining the content of the new workspace.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - The name of the workspace.
     * @param {string} [params.description] - The description of the workspace.
     * @param {string} [params.language] - The language of the workspace.
     * @param {CreateIntent[]} [params.intents] - An array of objects defining the intents for the workspace.
     * @param {CreateEntity[]} [params.entities] - An array of objects defining the entities for the workspace.
     * @param {CreateDialogNode[]} [params.dialog_nodes] - An array of objects defining the nodes in the workspace dialog.
     * @param {CreateCounterexample[]} [params.counterexamples] - An array of objects defining input examples that have been marked as irrelevant input.
     * @param {Object} [params.metadata] - Any metadata related to the workspace.
     * @param {boolean} [params.learning_opt_out] - Whether training data from the workspace can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createWorkspace(params?: AssistantV1.CreateWorkspaceParams, callback?: AssistantV1.Callback<AssistantV1.Workspace>): NodeJS.ReadableStream | void;
    /**
     * Delete workspace.
     *
     * Delete a workspace from the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteWorkspace(params: AssistantV1.DeleteWorkspaceParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get information about a workspace.
     *
     * Get information about a workspace, optionally including all workspace content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getWorkspace(params: AssistantV1.GetWorkspaceParams, callback?: AssistantV1.Callback<AssistantV1.WorkspaceExport>): NodeJS.ReadableStream | void;
    /**
     * List workspaces.
     *
     * List the workspaces associated with an Assistant service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listWorkspaces(params?: AssistantV1.ListWorkspacesParams, callback?: AssistantV1.Callback<AssistantV1.WorkspaceCollection>): NodeJS.ReadableStream | void;
    /**
     * Update workspace.
     *
     * Update an existing workspace with new or modified data. You must provide component objects defining the content of the updated workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} [params.name] - The name of the workspace.
     * @param {string} [params.description] - The description of the workspace.
     * @param {string} [params.language] - The language of the workspace.
     * @param {CreateIntent[]} [params.intents] - An array of objects defining the intents for the workspace.
     * @param {CreateEntity[]} [params.entities] - An array of objects defining the entities for the workspace.
     * @param {CreateDialogNode[]} [params.dialog_nodes] - An array of objects defining the nodes in the workspace dialog.
     * @param {CreateCounterexample[]} [params.counterexamples] - An array of objects defining input examples that have been marked as irrelevant input.
     * @param {Object} [params.metadata] - Any metadata related to the workspace.
     * @param {boolean} [params.learning_opt_out] - Whether training data from the workspace can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used.
     * @param {boolean} [params.append] - Specifies that the elements included in the request body are to be appended to the existing data in the workspace. The default value is `false`.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateWorkspace(params: AssistantV1.UpdateWorkspaceParams, callback?: AssistantV1.Callback<AssistantV1.Workspace>): NodeJS.ReadableStream | void;
    /*************************
     * message
     ************************/
    /**
     * Get a response to a user's input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - Unique identifier of the workspace.
     * @param {InputData} [params.input] - An input object that includes the input text.
     * @param {boolean} [params.alternate_intents] - Whether to return more than one intent. Set to `true` to return all matching intents.
     * @param {Context} [params.context] - State information for the conversation. Continue a conversation by including the context object from the previous response.
     * @param {RuntimeEntity[]} [params.entities] - Include the entities from the previous response when they do not need to change and to prevent Watson from trying to identify them.
     * @param {RuntimeIntent[]} [params.intents] - An array of name-confidence pairs for the user input. Include the intents from the previous response when they do not need to change and to prevent Watson from trying to identify them.
     * @param {OutputData} [params.output] - System output. Include the output from the request when you have several requests within the same Dialog turn to pass back in the intermediate information.
     * @param {boolean} [params.nodes_visited_details] - Whether to include additional diagnostic information about the dialog nodes that were visited during processing of the message.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    message(params: AssistantV1.MessageParams, callback?: AssistantV1.Callback<AssistantV1.MessageResponse>): NodeJS.ReadableStream | void;
    /*************************
     * intents
     ************************/
    /**
     * Create intent.
     *
     * Create a new intent.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The name of the intent.
     * @param {string} [params.description] - The description of the intent.
     * @param {CreateExample[]} [params.examples] - An array of user input examples.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createIntent(params: AssistantV1.CreateIntentParams, callback?: AssistantV1.Callback<AssistantV1.Intent>): NodeJS.ReadableStream | void;
    /**
     * Delete intent.
     *
     * Delete an intent from a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteIntent(params: AssistantV1.DeleteIntentParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get intent.
     *
     * Get information about an intent, optionally including all intent content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getIntent(params: AssistantV1.GetIntentParams, callback?: AssistantV1.Callback<AssistantV1.IntentExport>): NodeJS.ReadableStream | void;
    /**
     * List intents.
     *
     * List the intents for a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listIntents(params: AssistantV1.ListIntentsParams, callback?: AssistantV1.Callback<AssistantV1.IntentCollection>): NodeJS.ReadableStream | void;
    /**
     * Update intent.
     *
     * Update an existing intent with new or modified data. You must provide data defining the content of the updated intent.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {string} [params.new_intent] - The name of the intent.
     * @param {string} [params.new_description] - The description of the intent.
     * @param {CreateExample[]} [params.new_examples] - An array of user input examples for the intent.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateIntent(params: AssistantV1.UpdateIntentParams, callback?: AssistantV1.Callback<AssistantV1.Intent>): NodeJS.ReadableStream | void;
    /*************************
     * examples
     ************************/
    /**
     * Create user input example.
     *
     * Add a new user input example to an intent.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {string} params.text - The text of a user input example.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createExample(params: AssistantV1.CreateExampleParams, callback?: AssistantV1.Callback<AssistantV1.Example>): NodeJS.ReadableStream | void;
    /**
     * Delete user input example.
     *
     * Delete a user input example from an intent.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {string} params.text - The text of the user input example.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteExample(params: AssistantV1.DeleteExampleParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get user input example.
     *
     * Get information about a user input example.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {string} params.text - The text of the user input example.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getExample(params: AssistantV1.GetExampleParams, callback?: AssistantV1.Callback<AssistantV1.Example>): NodeJS.ReadableStream | void;
    /**
     * List user input examples.
     *
     * List the user input examples for an intent.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listExamples(params: AssistantV1.ListExamplesParams, callback?: AssistantV1.Callback<AssistantV1.ExampleCollection>): NodeJS.ReadableStream | void;
    /**
     * Update user input example.
     *
     * Update the text of a user input example.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.intent - The intent name (for example, `pizza_order`).
     * @param {string} params.text - The text of the user input example.
     * @param {string} [params.new_text] - The text of the user input example.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateExample(params: AssistantV1.UpdateExampleParams, callback?: AssistantV1.Callback<AssistantV1.Example>): NodeJS.ReadableStream | void;
    /*************************
     * entities
     ************************/
    /**
     * Create entity.
     *
     * Create a new entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} [params.description] - The description of the entity.
     * @param {Object} [params.metadata] - Any metadata related to the value.
     * @param {CreateValue[]} [params.values] - An array of entity values.
     * @param {boolean} [params.fuzzy_match] - Whether to use fuzzy matching for the entity.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createEntity(params: AssistantV1.CreateEntityParams, callback?: AssistantV1.Callback<AssistantV1.Entity>): NodeJS.ReadableStream | void;
    /**
     * Delete entity.
     *
     * Delete an entity from a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteEntity(params: AssistantV1.DeleteEntityParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get entity.
     *
     * Get information about an entity, optionally including all entity content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getEntity(params: AssistantV1.GetEntityParams, callback?: AssistantV1.Callback<AssistantV1.EntityExport>): NodeJS.ReadableStream | void;
    /**
     * List entities.
     *
     * List the entities for a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listEntities(params: AssistantV1.ListEntitiesParams, callback?: AssistantV1.Callback<AssistantV1.EntityCollection>): NodeJS.ReadableStream | void;
    /**
     * Update entity.
     *
     * Update an existing entity with new or modified data.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} [params.new_entity] - The name of the entity.
     * @param {string} [params.new_description] - The description of the entity.
     * @param {Object} [params.new_metadata] - Any metadata related to the entity.
     * @param {boolean} [params.new_fuzzy_match] - Whether to use fuzzy matching for the entity.
     * @param {CreateValue[]} [params.new_values] - An array of entity values.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateEntity(params: AssistantV1.UpdateEntityParams, callback?: AssistantV1.Callback<AssistantV1.Entity>): NodeJS.ReadableStream | void;
    /*************************
     * values
     ************************/
    /**
     * Add entity value.
     *
     * Create a new value for an entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {Object} [params.metadata] - Any metadata related to the entity value.
     * @param {string[]} [params.synonyms] - An array of synonyms for the entity value.
     * @param {string[]} [params.patterns] - An array of patterns for the entity value. A pattern is specified as a regular expression.
     * @param {string} [params.value_type] - Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createValue(params: AssistantV1.CreateValueParams, callback?: AssistantV1.Callback<AssistantV1.Value>): NodeJS.ReadableStream | void;
    /**
     * Delete entity value.
     *
     * Delete a value for an entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteValue(params: AssistantV1.DeleteValueParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get entity value.
     *
     * Get information about an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getValue(params: AssistantV1.GetValueParams, callback?: AssistantV1.Callback<AssistantV1.ValueExport>): NodeJS.ReadableStream | void;
    /**
     * List entity values.
     *
     * List the values for an entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {boolean} [params.export] - Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listValues(params: AssistantV1.ListValuesParams, callback?: AssistantV1.Callback<AssistantV1.ValueCollection>): NodeJS.ReadableStream | void;
    /**
     * Update entity value.
     *
     * Update the content of a value for an entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} [params.new_value] - The text of the entity value.
     * @param {Object} [params.new_metadata] - Any metadata related to the entity value.
     * @param {string} [params.new_type] - Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`.
     * @param {string[]} [params.new_synonyms] - An array of synonyms for the entity value.
     * @param {string[]} [params.new_patterns] - An array of patterns for the entity value. A pattern is specified as a regular expression.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateValue(params: AssistantV1.UpdateValueParams, callback?: AssistantV1.Callback<AssistantV1.Value>): NodeJS.ReadableStream | void;
    /*************************
     * synonyms
     ************************/
    /**
     * Add entity value synonym.
     *
     * Add a new synonym to an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createSynonym(params: AssistantV1.CreateSynonymParams, callback?: AssistantV1.Callback<AssistantV1.Synonym>): NodeJS.ReadableStream | void;
    /**
     * Delete entity value synonym.
     *
     * Delete a synonym for an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteSynonym(params: AssistantV1.DeleteSynonymParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get entity value synonym.
     *
     * Get information about a synonym for an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getSynonym(params: AssistantV1.GetSynonymParams, callback?: AssistantV1.Callback<AssistantV1.Synonym>): NodeJS.ReadableStream | void;
    /**
     * List entity value synonyms.
     *
     * List the synonyms for an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listSynonyms(params: AssistantV1.ListSynonymsParams, callback?: AssistantV1.Callback<AssistantV1.SynonymCollection>): NodeJS.ReadableStream | void;
    /**
     * Update entity value synonym.
     *
     * Update the information about a synonym for an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {string} [params.new_synonym] - The text of the synonym.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateSynonym(params: AssistantV1.UpdateSynonymParams, callback?: AssistantV1.Callback<AssistantV1.Synonym>): NodeJS.ReadableStream | void;
    /*************************
     * dialogNodes
     ************************/
    /**
     * Create dialog node.
     *
     * Create a dialog node.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.dialog_node - The dialog node ID.
     * @param {string} [params.description] - The description of the dialog node.
     * @param {string} [params.conditions] - The condition that will trigger the dialog node.
     * @param {string} [params.parent] - The ID of the parent dialog node (if any).
     * @param {string} [params.previous_sibling] - The previous dialog node.
     * @param {Object} [params.output] - The output of the dialog node.
     * @param {Object} [params.context] - The context for the dialog node.
     * @param {Object} [params.metadata] - The metadata for the dialog node.
     * @param {DialogNodeNextStep} [params.next_step] - The next step to execute following this dialog node.
     * @param {DialogNodeAction[]} [params.actions] - The actions for the dialog node.
     * @param {string} [params.title] - The alias used to identify the dialog node.
     * @param {string} [params.node_type] - How the dialog node is processed.
     * @param {string} [params.event_name] - How an `event_handler` node is processed.
     * @param {string} [params.variable] - The location in the dialog context where output is stored.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createDialogNode(params: AssistantV1.CreateDialogNodeParams, callback?: AssistantV1.Callback<AssistantV1.DialogNode>): NodeJS.ReadableStream | void;
    /**
     * Delete dialog node.
     *
     * Delete a dialog node from the workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.dialog_node - The dialog node ID (for example, `get_order`).
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteDialogNode(params: AssistantV1.DeleteDialogNodeParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get dialog node.
     *
     * Get information about a dialog node.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.dialog_node - The dialog node ID (for example, `get_order`).
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getDialogNode(params: AssistantV1.GetDialogNodeParams, callback?: AssistantV1.Callback<AssistantV1.DialogNode>): NodeJS.ReadableStream | void;
    /**
     * List dialog nodes.
     *
     * List the dialog nodes in the workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listDialogNodes(params: AssistantV1.ListDialogNodesParams, callback?: AssistantV1.Callback<AssistantV1.DialogNodeCollection>): NodeJS.ReadableStream | void;
    /**
     * Update dialog node.
     *
     * Update information for a dialog node.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.dialog_node - The dialog node ID (for example, `get_order`).
     * @param {string} [params.new_dialog_node] - The dialog node ID.
     * @param {string} [params.new_description] - The description of the dialog node.
     * @param {string} [params.new_conditions] - The condition that will trigger the dialog node.
     * @param {string} [params.new_parent] - The ID of the parent dialog node (if any).
     * @param {string} [params.new_previous_sibling] - The previous dialog node.
     * @param {Object} [params.new_output] - The output of the dialog node.
     * @param {Object} [params.new_context] - The context for the dialog node.
     * @param {Object} [params.new_metadata] - The metadata for the dialog node.
     * @param {DialogNodeNextStep} [params.new_next_step] - The next step to execute following this dialog node.
     * @param {string} [params.new_title] - The alias used to identify the dialog node.
     * @param {string} [params.new_type] - How the dialog node is processed.
     * @param {string} [params.new_event_name] - How an `event_handler` node is processed.
     * @param {string} [params.new_variable] - The location in the dialog context where output is stored.
     * @param {DialogNodeAction[]} [params.new_actions] - The actions for the dialog node.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateDialogNode(params: AssistantV1.UpdateDialogNodeParams, callback?: AssistantV1.Callback<AssistantV1.DialogNode>): NodeJS.ReadableStream | void;
    /*************************
     * logs
     ************************/
    /**
     * List log events in all workspaces.
     *
     * List log events in all workspaces in the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.filter - A cacheable parameter that limits the results to those matching the specified filter. You must specify a filter query that includes a value for `language`, as well as a value for `workspace_id` or `request.context.metadata.deployment`. For more information, see the [documentation](https://console.bluemix.net/docs/services/conversation/filter-reference.html#filter-query-syntax).
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listAllLogs(params: AssistantV1.ListAllLogsParams, callback?: AssistantV1.Callback<AssistantV1.LogCollection>): NodeJS.ReadableStream | void;
    /**
     * List log events in a workspace.
     *
     * List log events in a specific workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.filter] - A cacheable parameter that limits the results to those matching the specified filter. For more information, see the [documentation](https://console.bluemix.net/docs/services/conversation/filter-reference.html#filter-query-syntax).
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listLogs(params: AssistantV1.ListLogsParams, callback?: AssistantV1.Callback<AssistantV1.LogCollection>): NodeJS.ReadableStream | void;
    /*************************
     * counterexamples
     ************************/
    /**
     * Create counterexample.
     *
     * Add a new counterexample to a workspace. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.text - The text of a user input marked as irrelevant input.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    createCounterexample(params: AssistantV1.CreateCounterexampleParams, callback?: AssistantV1.Callback<AssistantV1.Counterexample>): NodeJS.ReadableStream | void;
    /**
     * Delete counterexample.
     *
     * Delete a counterexample from a workspace. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.text - The text of a user input counterexample (for example, `What are you wearing?`).
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    deleteCounterexample(params: AssistantV1.DeleteCounterexampleParams, callback?: AssistantV1.Callback<AssistantV1.Empty>): NodeJS.ReadableStream | void;
    /**
     * Get counterexample.
     *
     * Get information about a counterexample. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.text - The text of a user input counterexample (for example, `What are you wearing?`).
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    getCounterexample(params: AssistantV1.GetCounterexampleParams, callback?: AssistantV1.Callback<AssistantV1.Counterexample>): NodeJS.ReadableStream | void;
    /**
     * List counterexamples.
     *
     * List the counterexamples for a workspace. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {number} [params.page_limit] - The number of records to return in each page of results. The default page limit is 100.
     * @param {boolean} [params.include_count] - Whether to include information about the number of records returned.
     * @param {string} [params.sort] - Sorts the response according to the value of the specified property, in ascending or descending order.
     * @param {string} [params.cursor] - A token identifying the last value from the previous page of results.
     * @param {boolean} [params.include_audit] - Whether to include the audit properties (`created` and `updated` timestamps) in the response.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    listCounterexamples(params: AssistantV1.ListCounterexamplesParams, callback?: AssistantV1.Callback<AssistantV1.CounterexampleCollection>): NodeJS.ReadableStream | void;
    /**
     * Update counterexample.
     *
     * Update the text of a counterexample. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspace_id - The workspace ID.
     * @param {string} params.text - The text of a user input counterexample (for example, `What are you wearing?`).
     * @param {string} [params.new_text] - The text of the example to be marked as irrelevant input.
     * @param {Function} [callback] - The callback that handles the response.
     * @returns {NodeJS.ReadableStream|void}
     */
    updateCounterexample(params: AssistantV1.UpdateCounterexampleParams, callback?: AssistantV1.Callback<AssistantV1.Counterexample>): NodeJS.ReadableStream | void;
}
/*************************
 * interfaces
 ************************/
declare namespace AssistantV1 {
    /** Options for the `AssistantV1` constructor. */
    type Options = {
        version: string;
        url?: string;
        username?: string;
        password?: string;
        use_unauthenticated?: boolean;
        headers?: object;
    };
    /** The callback for a service request. */
    type Callback<T> = (error: any, body?: T, response?: RequestResponse) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `createWorkspace` operation. */
    interface CreateWorkspaceParams {
        /** The name of the workspace. */
        name?: string;
        /** The description of the workspace. */
        description?: string;
        /** The language of the workspace. */
        language?: string;
        /** An array of objects defining the intents for the workspace. */
        intents?: CreateIntent[];
        /** An array of objects defining the entities for the workspace. */
        entities?: CreateEntity[];
        /** An array of objects defining the nodes in the workspace dialog. */
        dialog_nodes?: CreateDialogNode[];
        /** An array of objects defining input examples that have been marked as irrelevant input. */
        counterexamples?: CreateCounterexample[];
        /** Any metadata related to the workspace. */
        metadata?: Object;
        /** Whether training data from the workspace can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used. */
        learning_opt_out?: boolean;
    }
    /** Parameters for the `deleteWorkspace` operation. */
    interface DeleteWorkspaceParams {
        /** The workspace ID. */
        workspace_id: string;
    }
    /** Parameters for the `getWorkspace` operation. */
    interface GetWorkspaceParams {
        /** The workspace ID. */
        workspace_id: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listWorkspaces` operation. */
    interface ListWorkspacesParams {
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateWorkspace` operation. */
    interface UpdateWorkspaceParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the workspace. */
        name?: string;
        /** The description of the workspace. */
        description?: string;
        /** The language of the workspace. */
        language?: string;
        /** An array of objects defining the intents for the workspace. */
        intents?: CreateIntent[];
        /** An array of objects defining the entities for the workspace. */
        entities?: CreateEntity[];
        /** An array of objects defining the nodes in the workspace dialog. */
        dialog_nodes?: CreateDialogNode[];
        /** An array of objects defining input examples that have been marked as irrelevant input. */
        counterexamples?: CreateCounterexample[];
        /** Any metadata related to the workspace. */
        metadata?: Object;
        /** Whether training data from the workspace can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used. */
        learning_opt_out?: boolean;
        /** Specifies that the elements included in the request body are to be appended to the existing data in the workspace. The default value is `false`. */
        append?: boolean;
    }
    /** Parameters for the `message` operation. */
    interface MessageParams {
        /** Unique identifier of the workspace. */
        workspace_id: string;
        /** An input object that includes the input text. */
        input?: InputData;
        /** Whether to return more than one intent. Set to `true` to return all matching intents. */
        alternate_intents?: boolean;
        /** State information for the conversation. Continue a conversation by including the context object from the previous response. */
        context?: Context;
        /** Include the entities from the previous response when they do not need to change and to prevent Watson from trying to identify them. */
        entities?: RuntimeEntity[];
        /** An array of name-confidence pairs for the user input. Include the intents from the previous response when they do not need to change and to prevent Watson from trying to identify them. */
        intents?: RuntimeIntent[];
        /** System output. Include the output from the request when you have several requests within the same Dialog turn to pass back in the intermediate information. */
        output?: OutputData;
        /** Whether to include additional diagnostic information about the dialog nodes that were visited during processing of the message. */
        nodes_visited_details?: boolean;
    }
    /** Parameters for the `createIntent` operation. */
    interface CreateIntentParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the intent. */
        intent: string;
        /** The description of the intent. */
        description?: string;
        /** An array of user input examples. */
        examples?: CreateExample[];
    }
    /** Parameters for the `deleteIntent` operation. */
    interface DeleteIntentParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
    }
    /** Parameters for the `getIntent` operation. */
    interface GetIntentParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listIntents` operation. */
    interface ListIntentsParams {
        /** The workspace ID. */
        workspace_id: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateIntent` operation. */
    interface UpdateIntentParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** The name of the intent. */
        new_intent?: string;
        /** The description of the intent. */
        new_description?: string;
        /** An array of user input examples for the intent. */
        new_examples?: CreateExample[];
    }
    /** Parameters for the `createExample` operation. */
    interface CreateExampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** The text of a user input example. */
        text: string;
    }
    /** Parameters for the `deleteExample` operation. */
    interface DeleteExampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** The text of the user input example. */
        text: string;
    }
    /** Parameters for the `getExample` operation. */
    interface GetExampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** The text of the user input example. */
        text: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listExamples` operation. */
    interface ListExamplesParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateExample` operation. */
    interface UpdateExampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The intent name (for example, `pizza_order`). */
        intent: string;
        /** The text of the user input example. */
        text: string;
        /** The text of the user input example. */
        new_text?: string;
    }
    /** Parameters for the `createEntity` operation. */
    interface CreateEntityParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The description of the entity. */
        description?: string;
        /** Any metadata related to the value. */
        metadata?: Object;
        /** An array of entity values. */
        values?: CreateValue[];
        /** Whether to use fuzzy matching for the entity. */
        fuzzy_match?: boolean;
    }
    /** Parameters for the `deleteEntity` operation. */
    interface DeleteEntityParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
    }
    /** Parameters for the `getEntity` operation. */
    interface GetEntityParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listEntities` operation. */
    interface ListEntitiesParams {
        /** The workspace ID. */
        workspace_id: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateEntity` operation. */
    interface UpdateEntityParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The name of the entity. */
        new_entity?: string;
        /** The description of the entity. */
        new_description?: string;
        /** Any metadata related to the entity. */
        new_metadata?: Object;
        /** Whether to use fuzzy matching for the entity. */
        new_fuzzy_match?: boolean;
        /** An array of entity values. */
        new_values?: CreateValue[];
    }
    /** Parameters for the `createValue` operation. */
    interface CreateValueParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** Any metadata related to the entity value. */
        metadata?: Object;
        /** An array of synonyms for the entity value. */
        synonyms?: string[];
        /** An array of patterns for the entity value. A pattern is specified as a regular expression. */
        patterns?: string[];
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        value_type?: CreateValueConstants.ValueType | string;
    }
    /** Constants for the `createValue` operation. */
    namespace CreateValueConstants {
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        enum ValueType {
            SYNONYMS = "synonyms",
            PATTERNS = "patterns",
        }
    }
    /** Parameters for the `deleteValue` operation. */
    interface DeleteValueParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
    }
    /** Parameters for the `getValue` operation. */
    interface GetValueParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listValues` operation. */
    interface ListValuesParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** Whether to include all element content in the returned data. If export=`false`, the returned data includes only information about the element itself. If export=`true`, all content, including subelements, is included. The default value is `false`. */
        export?: boolean;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateValue` operation. */
    interface UpdateValueParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** The text of the entity value. */
        new_value?: string;
        /** Any metadata related to the entity value. */
        new_metadata?: Object;
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        new_type?: UpdateValueConstants.ValueType | string;
        /** An array of synonyms for the entity value. */
        new_synonyms?: string[];
        /** An array of patterns for the entity value. A pattern is specified as a regular expression. */
        new_patterns?: string[];
    }
    /** Constants for the `updateValue` operation. */
    namespace UpdateValueConstants {
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        enum ValueType {
            SYNONYMS = "synonyms",
            PATTERNS = "patterns",
        }
    }
    /** Parameters for the `createSynonym` operation. */
    interface CreateSynonymParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** The text of the synonym. */
        synonym: string;
    }
    /** Parameters for the `deleteSynonym` operation. */
    interface DeleteSynonymParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** The text of the synonym. */
        synonym: string;
    }
    /** Parameters for the `getSynonym` operation. */
    interface GetSynonymParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** The text of the synonym. */
        synonym: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listSynonyms` operation. */
    interface ListSynonymsParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateSynonym` operation. */
    interface UpdateSynonymParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The name of the entity. */
        entity: string;
        /** The text of the entity value. */
        value: string;
        /** The text of the synonym. */
        synonym: string;
        /** The text of the synonym. */
        new_synonym?: string;
    }
    /** Parameters for the `createDialogNode` operation. */
    interface CreateDialogNodeParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The dialog node ID. */
        dialog_node: string;
        /** The description of the dialog node. */
        description?: string;
        /** The condition that will trigger the dialog node. */
        conditions?: string;
        /** The ID of the parent dialog node (if any). */
        parent?: string;
        /** The previous dialog node. */
        previous_sibling?: string;
        /** The output of the dialog node. */
        output?: Object;
        /** The context for the dialog node. */
        context?: Object;
        /** The metadata for the dialog node. */
        metadata?: Object;
        /** The next step to execute following this dialog node. */
        next_step?: DialogNodeNextStep;
        /** The actions for the dialog node. */
        actions?: DialogNodeAction[];
        /** The alias used to identify the dialog node. */
        title?: string;
        /** How the dialog node is processed. */
        node_type?: CreateDialogNodeConstants.NodeType | string;
        /** How an `event_handler` node is processed. */
        event_name?: CreateDialogNodeConstants.EventName | string;
        /** The location in the dialog context where output is stored. */
        variable?: string;
    }
    /** Constants for the `createDialogNode` operation. */
    namespace CreateDialogNodeConstants {
        /** How the dialog node is processed. */
        enum NodeType {
            STANDARD = "standard",
            EVENT_HANDLER = "event_handler",
            FRAME = "frame",
            SLOT = "slot",
            RESPONSE_CONDITION = "response_condition",
        }
        /** How an `event_handler` node is processed. */
        enum EventName {
            FOCUS = "focus",
            INPUT = "input",
            FILLED = "filled",
            VALIDATE = "validate",
            FILLED_MULTIPLE = "filled_multiple",
            GENERIC = "generic",
            NOMATCH = "nomatch",
            NOMATCH_RESPONSES_DEPLETED = "nomatch_responses_depleted",
        }
    }
    /** Parameters for the `deleteDialogNode` operation. */
    interface DeleteDialogNodeParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The dialog node ID (for example, `get_order`). */
        dialog_node: string;
    }
    /** Parameters for the `getDialogNode` operation. */
    interface GetDialogNodeParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The dialog node ID (for example, `get_order`). */
        dialog_node: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listDialogNodes` operation. */
    interface ListDialogNodesParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateDialogNode` operation. */
    interface UpdateDialogNodeParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The dialog node ID (for example, `get_order`). */
        dialog_node: string;
        /** The dialog node ID. */
        new_dialog_node?: string;
        /** The description of the dialog node. */
        new_description?: string;
        /** The condition that will trigger the dialog node. */
        new_conditions?: string;
        /** The ID of the parent dialog node (if any). */
        new_parent?: string;
        /** The previous dialog node. */
        new_previous_sibling?: string;
        /** The output of the dialog node. */
        new_output?: Object;
        /** The context for the dialog node. */
        new_context?: Object;
        /** The metadata for the dialog node. */
        new_metadata?: Object;
        /** The next step to execute following this dialog node. */
        new_next_step?: DialogNodeNextStep;
        /** The alias used to identify the dialog node. */
        new_title?: string;
        /** How the dialog node is processed. */
        new_type?: UpdateDialogNodeConstants.NodeType | string;
        /** How an `event_handler` node is processed. */
        new_event_name?: UpdateDialogNodeConstants.EventName | string;
        /** The location in the dialog context where output is stored. */
        new_variable?: string;
        /** The actions for the dialog node. */
        new_actions?: DialogNodeAction[];
    }
    /** Constants for the `updateDialogNode` operation. */
    namespace UpdateDialogNodeConstants {
        /** How the dialog node is processed. */
        enum NodeType {
            STANDARD = "standard",
            EVENT_HANDLER = "event_handler",
            FRAME = "frame",
            SLOT = "slot",
            RESPONSE_CONDITION = "response_condition",
        }
        /** How an `event_handler` node is processed. */
        enum EventName {
            FOCUS = "focus",
            INPUT = "input",
            FILLED = "filled",
            VALIDATE = "validate",
            FILLED_MULTIPLE = "filled_multiple",
            GENERIC = "generic",
            NOMATCH = "nomatch",
            NOMATCH_RESPONSES_DEPLETED = "nomatch_responses_depleted",
        }
    }
    /** Parameters for the `listAllLogs` operation. */
    interface ListAllLogsParams {
        /** A cacheable parameter that limits the results to those matching the specified filter. You must specify a filter query that includes a value for `language`, as well as a value for `workspace_id` or `request.context.metadata.deployment`. For more information, see the [documentation](https://console.bluemix.net/docs/services/conversation/filter-reference.html#filter-query-syntax). */
        filter: string;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
    }
    /** Parameters for the `listLogs` operation. */
    interface ListLogsParams {
        /** The workspace ID. */
        workspace_id: string;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A cacheable parameter that limits the results to those matching the specified filter. For more information, see the [documentation](https://console.bluemix.net/docs/services/conversation/filter-reference.html#filter-query-syntax). */
        filter?: string;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
    }
    /** Parameters for the `createCounterexample` operation. */
    interface CreateCounterexampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The text of a user input marked as irrelevant input. */
        text: string;
    }
    /** Parameters for the `deleteCounterexample` operation. */
    interface DeleteCounterexampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The text of a user input counterexample (for example, `What are you wearing?`). */
        text: string;
    }
    /** Parameters for the `getCounterexample` operation. */
    interface GetCounterexampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The text of a user input counterexample (for example, `What are you wearing?`). */
        text: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `listCounterexamples` operation. */
    interface ListCounterexamplesParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The number of records to return in each page of results. The default page limit is 100. */
        page_limit?: number;
        /** Whether to include information about the number of records returned. */
        include_count?: boolean;
        /** Sorts the response according to the value of the specified property, in ascending or descending order. */
        sort?: string;
        /** A token identifying the last value from the previous page of results. */
        cursor?: string;
        /** Whether to include the audit properties (`created` and `updated` timestamps) in the response. */
        include_audit?: boolean;
    }
    /** Parameters for the `updateCounterexample` operation. */
    interface UpdateCounterexampleParams {
        /** The workspace ID. */
        workspace_id: string;
        /** The text of a user input counterexample (for example, `What are you wearing?`). */
        text: string;
        /** The text of the example to be marked as irrelevant input. */
        new_text?: string;
    }
    /*************************
     * model interfaces
     ************************/
    /** CaptureGroup. */
    interface CaptureGroup {
        /** A recognized capture group for the entity. */
        group: string;
        /** Zero-based character offsets that indicate where the entity value begins and ends in the input text. */
        location?: number[];
    }
    /** Context information for the message. Include the context from the previous response to maintain state for the conversation. */
    interface Context {
        /** The unique identifier of the conversation. */
        conversation_id: string;
        /** For internal use only. */
        system: SystemResponse;
    }
    /** Counterexample. */
    interface Counterexample {
        /** The text of the counterexample. */
        text: string;
        /** The timestamp for creation of the counterexample. */
        created: string;
        /** The timestamp for the last update to the counterexample. */
        updated: string;
    }
    /** CounterexampleCollection. */
    interface CounterexampleCollection {
        /** An array of objects describing the examples marked as irrelevant input. */
        counterexamples: Counterexample[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** CreateCounterexample. */
    interface CreateCounterexample {
        /** The text of a user input marked as irrelevant input. */
        text: string;
    }
    /** CreateDialogNode. */
    interface CreateDialogNode {
        /** The dialog node ID. */
        dialog_node: string;
        /** The description of the dialog node. */
        description?: string;
        /** The condition that will trigger the dialog node. */
        conditions?: string;
        /** The ID of the parent dialog node (if any). */
        parent?: string;
        /** The previous dialog node. */
        previous_sibling?: string;
        /** The output of the dialog node. */
        output?: Object;
        /** The context for the dialog node. */
        context?: Object;
        /** The metadata for the dialog node. */
        metadata?: Object;
        /** The next step to execute following this dialog node. */
        next_step?: DialogNodeNextStep;
        /** The actions for the dialog node. */
        actions?: DialogNodeAction[];
        /** The alias used to identify the dialog node. */
        title?: string;
        /** How the dialog node is processed. */
        node_type?: string;
        /** How an `event_handler` node is processed. */
        event_name?: string;
        /** The location in the dialog context where output is stored. */
        variable?: string;
    }
    /** CreateEntity. */
    interface CreateEntity {
        /** The name of the entity. */
        entity: string;
        /** The description of the entity. */
        description?: string;
        /** Any metadata related to the value. */
        metadata?: Object;
        /** An array of entity values. */
        values?: CreateValue[];
        /** Whether to use fuzzy matching for the entity. */
        fuzzy_match?: boolean;
    }
    /** CreateExample. */
    interface CreateExample {
        /** The text of a user input example. */
        text: string;
    }
    /** CreateIntent. */
    interface CreateIntent {
        /** The name of the intent. */
        intent: string;
        /** The description of the intent. */
        description?: string;
        /** An array of user input examples. */
        examples?: CreateExample[];
    }
    /** CreateValue. */
    interface CreateValue {
        /** The text of the entity value. */
        value: string;
        /** Any metadata related to the entity value. */
        metadata?: Object;
        /** An array of synonyms for the entity value. */
        synonyms?: string[];
        /** An array of patterns for the entity value. A pattern is specified as a regular expression. */
        patterns?: string[];
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        value_type?: string;
    }
    /** DialogNode. */
    interface DialogNode {
        /** The dialog node ID. */
        dialog_node_id: string;
        /** The description of the dialog node. */
        description?: string;
        /** The condition that triggers the dialog node. */
        conditions?: string;
        /** The ID of the parent dialog node. */
        parent?: string;
        /** The ID of the previous sibling dialog node. */
        previous_sibling?: string;
        /** The output of the dialog node. */
        output?: Object;
        /** The context (if defined) for the dialog node. */
        context?: Object;
        /** The metadata (if any) for the dialog node. */
        metadata?: Object;
        /** The next step to execute following this dialog node. */
        next_step?: DialogNodeNextStep;
        /** The timestamp for creation of the dialog node. */
        created: string;
        /** The timestamp for the most recent update to the dialog node. */
        updated: string;
        /** The actions for the dialog node. */
        actions?: DialogNodeAction[];
        /** The alias used to identify the dialog node. */
        title?: string;
        /** How the dialog node is processed. */
        node_type?: string;
        /** How an `event_handler` node is processed. */
        event_name?: string;
        /** The location in the dialog context where output is stored. */
        variable?: string;
    }
    /** DialogNodeAction. */
    interface DialogNodeAction {
        /** The name of the action. */
        name: string;
        /** The type of action to invoke. */
        action_type?: string;
        /** A map of key/value pairs to be provided to the action. */
        parameters?: Object;
        /** The location in the dialog context where the result of the action is stored. */
        result_variable: string;
        /** The name of the context variable that the client application will use to pass in credentials for the action. */
        credentials?: string;
    }
    /** DialogNodeCollection. */
    interface DialogNodeCollection {
        dialog_nodes: DialogNode[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** The next step to execute following this dialog node. */
    interface DialogNodeNextStep {
        /** How the `next_step` reference is processed. If you specify `jump_to`, then you must also specify a value for the `dialog_node` property. */
        behavior: string;
        /** The ID of the dialog node to process next. This parameter is required if `behavior`=`jump_to`. */
        dialog_node?: string;
        /** Which part of the dialog node to process next. */
        selector?: string;
    }
    /** DialogNodeVisitedDetails. */
    interface DialogNodeVisitedDetails {
        /** A dialog node that was triggered during processing of the input message. */
        dialog_node?: string;
        /** The title of the dialog node. */
        title?: string;
    }
    /** Entity. */
    interface Entity {
        /** The name of the entity. */
        entity_name: string;
        /** The timestamp for creation of the entity. */
        created: string;
        /** The timestamp for the last update to the entity. */
        updated: string;
        /** The description of the entity. */
        description?: string;
        /** Any metadata related to the entity. */
        metadata?: Object;
        /** Whether fuzzy matching is used for the entity. */
        fuzzy_match?: boolean;
    }
    /** An array of entities. */
    interface EntityCollection {
        /** An array of entities. */
        entities: EntityExport[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** EntityExport. */
    interface EntityExport {
        /** The name of the entity. */
        entity_name: string;
        /** The timestamp for creation of the entity. */
        created: string;
        /** The timestamp for the last update to the entity. */
        updated: string;
        /** The description of the entity. */
        description?: string;
        /** Any metadata related to the entity. */
        metadata?: Object;
        /** Whether fuzzy matching is used for the entity. */
        fuzzy_match?: boolean;
        /** An array of entity values. */
        values?: ValueExport[];
    }
    /** Example. */
    interface Example {
        /** The text of the example. */
        example_text: string;
        /** The timestamp for creation of the example. */
        created: string;
        /** The timestamp for the last update to the example. */
        updated: string;
    }
    /** ExampleCollection. */
    interface ExampleCollection {
        /** An array of Example objects describing the examples defined for the intent. */
        examples: Example[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** An object defining the user input. */
    interface InputData {
        /** The text of the user input. */
        text: string;
    }
    /** Intent. */
    interface Intent {
        /** The name of the intent. */
        intent_name: string;
        /** The timestamp for creation of the intent. */
        created: string;
        /** The timestamp for the last update to the intent. */
        updated: string;
        /** The description of the intent. */
        description?: string;
    }
    /** IntentCollection. */
    interface IntentCollection {
        /** An array of intents. */
        intents: IntentExport[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** IntentExport. */
    interface IntentExport {
        /** The name of the intent. */
        intent_name: string;
        /** The timestamp for creation of the intent. */
        created: string;
        /** The timestamp for the last update to the intent. */
        updated: string;
        /** The description of the intent. */
        description?: string;
        /** An array of user input examples. */
        examples?: Example[];
    }
    /** LogCollection. */
    interface LogCollection {
        /** An array of log events. */
        logs: LogExport[];
        /** An object defining the pagination data for the returned objects. */
        pagination: LogPagination;
    }
    /** LogExport. */
    interface LogExport {
        /** A request formatted for the Assistant service. */
        request: MessageRequest;
        /** A response from the Assistant service. */
        response: MessageResponse;
        /** A unique identifier for the logged message. */
        log_id: string;
        /** The timestamp for receipt of the message. */
        request_timestamp: string;
        /** The timestamp for the system response to the message. */
        response_timestamp: string;
        /** The workspace ID. */
        workspace_id: string;
        /** The language of the workspace where the message request was made. */
        language: string;
    }
    /** Log message details. */
    interface LogMessage {
        /** The severity of the message. */
        level: string;
        /** The text of the message. */
        msg: string;
    }
    /** The pagination data for the returned objects. */
    interface LogPagination {
        /** The URL that will return the next page of results. */
        next_url?: string;
        /** Reserved for future use. */
        matched?: number;
    }
    /** An input object that includes the input text. */
    interface MessageInput {
        /** The user's input. */
        text?: string;
    }
    /** A request formatted for the Assistant service. */
    interface MessageRequest {
        /** An input object that includes the input text. */
        input?: InputData;
        /** Whether to return more than one intent. Set to `true` to return all matching intents. */
        alternate_intents?: boolean;
        /** State information for the conversation. Continue a conversation by including the context object from the previous response. */
        context?: Context;
        /** Include the entities from the previous response when they do not need to change and to prevent Watson from trying to identify them. */
        entities?: RuntimeEntity[];
        /** An array of name-confidence pairs for the user input. Include the intents from the previous response when they do not need to change and to prevent Watson from trying to identify them. */
        intents?: RuntimeIntent[];
        /** System output. Include the output from the request when you have several requests within the same Dialog turn to pass back in the intermediate information. */
        output?: OutputData;
    }
    /** A response from the Assistant service. */
    interface MessageResponse {
        /** The user input from the request. */
        input?: MessageInput;
        /** An array of intents recognized in the user input, sorted in descending order of confidence. */
        intents: RuntimeIntent[];
        /** An array of entities identified in the user input. */
        entities: RuntimeEntity[];
        /** Whether to return more than one intent. `true` indicates that all matching intents are returned. */
        alternate_intents?: boolean;
        /** State information for the conversation. */
        context: Context;
        /** Output from the dialog, including the response to the user, the nodes that were triggered, and log messages. */
        output: OutputData;
    }
    /** An output object that includes the response to the user, the nodes that were hit, and messages from the log. */
    interface OutputData {
        /** Up to 50 messages logged with the request. */
        log_messages: LogMessage[];
        /** An array of responses to the user. */
        text: string[];
        /** An array of the nodes that were triggered to create the response. */
        nodes_visited?: string[];
        /** An array of objects containing detailed diagnostic information about the nodes that were triggered during processing of the input message. */
        nodes_visited_details?: DialogNodeVisitedDetails[];
    }
    /** The pagination data for the returned objects. */
    interface Pagination {
        /** The URL that will return the same page of results. */
        refresh_url: string;
        /** The URL that will return the next page of results. */
        next_url?: string;
        /** Reserved for future use. */
        total?: number;
        /** Reserved for future use. */
        matched?: number;
    }
    /** A term from the request that was identified as an entity. */
    interface RuntimeEntity {
        /** The recognized entity from a term in the input. */
        entity: string;
        /** Zero-based character offsets that indicate where the entity value begins and ends in the input text. */
        location: number[];
        /** The term in the input text that was recognized. */
        value: string;
        /** A decimal percentage that represents Watson's confidence in the entity. */
        confidence?: number;
        /** The metadata for the entity. */
        metadata?: Object;
        /** The recognized capture groups for the entity, as defined by the entity pattern. */
        groups?: CaptureGroup[];
    }
    /** An intent identified in the user input. */
    interface RuntimeIntent {
        /** The name of the recognized intent. */
        intent: string;
        /** A decimal percentage that represents Watson's confidence in the intent. */
        confidence: number;
    }
    /** Synonym. */
    interface Synonym {
        /** The text of the synonym. */
        synonym_text: string;
        /** The timestamp for creation of the synonym. */
        created: string;
        /** The timestamp for the most recent update to the synonym. */
        updated: string;
    }
    /** SynonymCollection. */
    interface SynonymCollection {
        /** An array of synonyms. */
        synonyms: Synonym[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** For internal use only. */
    interface SystemResponse {
    }
    /** Value. */
    interface Value {
        /** The text of the entity value. */
        value_text: string;
        /** Any metadata related to the entity value. */
        metadata?: Object;
        /** The timestamp for creation of the entity value. */
        created: string;
        /** The timestamp for the last update to the entity value. */
        updated: string;
        /** An array of synonyms for the entity value. */
        synonyms?: string[];
        /** An array of patterns for the entity value. A pattern is specified as a regular expression. */
        patterns?: string[];
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        value_type: string;
    }
    /** ValueCollection. */
    interface ValueCollection {
        /** An array of entity values. */
        values: ValueExport[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** ValueExport. */
    interface ValueExport {
        /** The text of the entity value. */
        value_text: string;
        /** Any metadata related to the entity value. */
        metadata?: Object;
        /** The timestamp for creation of the entity value. */
        created: string;
        /** The timestamp for the last update to the entity value. */
        updated: string;
        /** An array of synonyms for the entity value. */
        synonyms?: string[];
        /** An array of patterns for the entity value. A pattern is specified as a regular expression. */
        patterns?: string[];
        /** Specifies the type of value (`synonyms` or `patterns`). The default value is `synonyms`. */
        value_type: string;
    }
    /** Workspace. */
    interface Workspace {
        /** The name of the workspace. */
        name: string;
        /** The language of the workspace. */
        language: string;
        /** The timestamp for creation of the workspace. */
        created: string;
        /** The timestamp for the last update to the workspace. */
        updated: string;
        /** The workspace ID. */
        workspace_id: string;
        /** The description of the workspace. */
        description?: string;
        /** Any metadata that is required by the workspace. */
        metadata?: Object;
        /** Whether training data from the workspace can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used. */
        learning_opt_out?: boolean;
    }
    /** WorkspaceCollection. */
    interface WorkspaceCollection {
        /** An array of workspaces. */
        workspaces: Workspace[];
        /** An object defining the pagination data for the returned objects. */
        pagination: Pagination;
    }
    /** WorkspaceExport. */
    interface WorkspaceExport {
        /** The name of the workspace. */
        name: string;
        /** The description of the workspace. */
        description: string;
        /** The language of the workspace. */
        language: string;
        /** Any metadata that is required by the workspace. */
        metadata: Object;
        /** The timestamp for creation of the workspace. */
        created: string;
        /** The timestamp for the last update to the workspace. */
        updated: string;
        /** The workspace ID. */
        workspace_id: string;
        /** The current status of the workspace. */
        status: string;
        /** Whether training data from the workspace can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used. */
        learning_opt_out: boolean;
        /** An array of intents. */
        intents?: IntentExport[];
        /** An array of entities. */
        entities?: EntityExport[];
        /** An array of counterexamples. */
        counterexamples?: Counterexample[];
        /** An array of objects describing the dialog nodes in the workspace. */
        dialog_nodes?: DialogNode[];
    }
}
export = AssistantV1;
